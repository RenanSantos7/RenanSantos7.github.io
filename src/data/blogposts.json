[
	{
		"id": "aB3dE9",
		"title": "Olá mundo",
		"publication": "2023-09-17T03:00:00.000Z",
		"tagList": ["geral", "texto", "teste"],
		"img": "https://images.unsplash.com/photo-1579600161224-cac5a2971069",
		"description": "Seguindo a velha regra da informática de que ao começar algo novo, se deve começar com essa mensagem, lá vai: Olá Mundo!",
		"content": "Seguindo a velha regra da informática de que ao começar algo novo, se deve começar com essa mensagem, lá vai:\n\nOlá Mundo!\n\nEsse é um blog em que eu estarei mais preocupado em escrever do que em ser lido.Mas se por um acaso você estiver lendo, não se sinta tímido para enviar seu feedback.No rodapé da página tem meu email.\n\nA verdade é que esse blog é mais um desafio para eu aprender a desenvolver para a web, pois ele está sendo feito todo do **zero**, sem uma plataforma para ajudar como Blogger ou Wordpress.\n\nPor quê? A pergunta certa não é \"por quê?\". É: \"por que não?\"</p>"
	},
	{
		"id": "Xy7kLm",
		"title": "Por que sempre tem um hater de React?",
		"publication": "2023-10-12T03:00:00.000Z",
		"tagList": ["react", "javascript"],
		"img": "https://images.unsplash.com/photo-1633356122544-f134324a6cee",
		"description": "*Por que sempre tem um hater de React?*&nbsp; Li um desses num evento no Discord da Alura. Eu respondi que...",
		"content": "O React é uma biblioteca de desenvolvimento para web apps com Javascript desenvolvida pelo *Facebook* (hoje, *Meta*) que virou um sucesso na comunidade front-end, sendo hoje um das tecnologias mais buscada em vagas nessa área.\n\nApesar de todo esse sucesso, não faltam críticas. *Por que sempre tem um hater de React?* Li um desses num evento no Discord da Alura. \"*Por que ele cria muitas complicações demais pro desenvolvedor pra pouca vantagem pro usuário*\", respondi.\n\nNesse primeiro momento tendo contato com a biblioteca é essa minha impressão, mas pensando melhor acho que o React não é o problema em si, mas sim o seu uso indiscriminado. Não é qualquer *site* que <strong>precisa</strong> usar React. A função dele é criar *webapps*, ou seja aplicativos baseados na web e que rodam no navegador. Se você vai simplesmente criar um portifólio, uma *landing page* ou algo do tipo, com certeza fará muito mais sentido usar o bom HTML5 \"vanilla\" e seus inseparáveis companheiros, JavaScript e CSS.\n\nAgora se, por algum motivo, seu *site* se aproxima de um aplicativo, como um *e-commerce* ou outra coisa do tipo, aí sim nosso amigo React pode te ajudar.\n\nAlém disso, a lógica da componentização não está presa a ele, podendo ser muito bem ser aplicada com outras tecnologias. No JS padrão, por exemplo, não é mais tão trabalhoso acrescentar e manipular elementos da página. *Template strings* estão aí para isso! Nesse mesmo *site* eu uso bastante componentização apenas com JS.\n\nEnfim, tudo tem sua hora e seu lugar e não é preciso odiar o React e sim compreender o propósito dele, para melhor utilizá-lo.</p>"
	},
	{
		"id": "pQ8wRt",
		"title": "Meu 2023",
		"publication": "2023-12-26T03:00:00.000Z",
		"tagList": ["geral"],
		"img": "/assets/blog/edge-vscode.jpg",
		"description": "Se algo marcou meu 2023, com certeza foram as mudanças. Tanto na vida pessoal quanto na profissional eu precisei me redescobrir.",
		"content": "Se algo marcou meu 2023, com certeza foram as mudanças. Tanto na vida pessoal quanto na profissional eu precisei me redescobrir. Buscar lá atrás quem eu seria a partir de agora. E algo que era apenas um hobby há um anos eu decidi que seria minha próxima profissão.\n\nE em então fui em busca de um sonho que eu não sabia que tinha. A programação me conquistou muito mais do que o Direito jamais fez. Não se trata da promessa fácil de dinheiro que muitos vendem na Internet, mas realmente um vocação que eu descobri esse ano.\n\nComo eu conto na sessão ***Sobre mim***, sou formado em Direito e advogo desde 2012, mas recentemente surgiu em mim uma vontade de mudar de carreira. E acabei escolhendo algo que eu tinha começado a aprender por *hobby*: o desenvolvimento para web. Assim que me formei comecei a aprender a mexer com HTML para criar um *Vade Mecum*, pois não queria mais comprar um todo ano se eu podia simplesmente armazená-los no meu PC. Foi então que fui gradativamente me aprofundando no assunto e descobrindo a magia do CSS. Mas tinha parado por aí, o JavaScript era um pouco mais complexo e decidi deixá-lo para depois.\n\nE então esse ano comecei efetivamente a me dedicar a estudar programação com mais afinco, começando pelo Curso de Lógica de Programação do canal <b>Curso em Vídeo</b> do Professor Gustavo Guanabara. Era a base cuja falta me dificultou aprender JS lá atrás. Foi muito bom começar com o bom e velho Guanabara, devido a sua didática e o desejo de que a gente realmente aprenda.\n\nO passo seguinte foi partir para cursos pagos, pois o conteúdo gratuito muitas vezes é pouco e/ou esparso. Cursos pagos são mais interessantes para quem está iniciando devido à organização dos assuntos e por você estar com profissionais de auxiliando na tua jornada de aprendizado, o que sem dúvida é melhor do que andar sozinho. E acredito que foi um ano bem proveitoso na Alura, anto que vários dos projetos que tenho aqui no meu portifólio foram feitos lá:\n\n![Retrospectiva 2023 na Alura](/assets/blog/retrospectiva-2023-alura.jpg)\nRetrospectiva 2023 na Alura\n\nTambém foi um ano de eu voltar para o LinkedIn. Não sei ainda se estou usando ele da forma mais correta, mas de qualquer forma, no momento, estou interessado mais em me qualificar do que em buscar um emprego na área, afinal ainda estou advogando. É como diz minha psicóloga: você amanhã vai se arrepender do que não começou hoje, então melhor mal feito do que não feito.\n\nE 2024, acho que será o ano para começar a colher os esforços desse ano. De sair da curva e seguir nessa nova estrada."
	},
	{
		"id": "Zt2vHs",
		"title": "Um ano estudando programação",
		"publication": "2024-01-15T03:00:00.000Z",
		"tagList": ["geral"],
		"img": "/assets/blog/homem-na-frente-do-notebook.jpg",
		"description": "Janeiro chegou e essa é a hora de falar um pouco sobre a minha experiência de um ano estudando programação.",
		"content": "<p>Janeiro chegou e essa é a hora de falar um pouco sobre a minha experiência de um ano estudando programação. Lá no comecinho de 2023 comecei a estudar na Alura essa plataforma que, sem exageros, é enorme e incrível. Embora no começo tenha me sentido um pouco perdido no meio de tanto conteúdo, logo me encontrei. Na verdade, eles têm estado atentos a esse problema e implementado algumas melhorias, mas acredito que ainda haja espaço para mais.\n\nO modelo de assinatura única também me agradou mais, pois oferece acesso a uma verdadeira biblioteca de conhecimento de uma vez só, ao invés de outras plataformas, onde você precisa pagar por curso. Assim, pude ter uma visão ampla de o que eu já sabia e o que eu ainda tinha pela frente para aprender, caso quisesse.\n\nAlém dos cursos, descobri a importância de seguir certos perfis nas redes sociais. Pessoas como Sujeito Programador (<a href=\"https://www.youtube.com/@Sujeitoprogramador\" target=\"_blank\" rel=\"noopener\">Youtube</a> e <a href=\"https://www.instagram.com/sujeitoprogramador?igsh=dHcyc2Z1NWwwamph\" target=\"_blank\" rel=\"noopener noreferrer\">Instagram</a>), Karol Attekita (<a href=\"https://www.youtube.com/@attekitadev\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>), Mario Souto (<a href=\"https://www.youtube.com/@DevSoutinho\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>) e <span style=\"text-decoration: line-through\">Futuro</span> Dev John (<a href=\"https://www.youtube.com/@futuroDevJohn\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a> e <a href=\"https://www.instagram.com/futurodevjohn?igsh=eHNyY2FzMm96dTlw\" target=\"_blank\" rel=\"noopener noreferrer\">Instagram</a> ) têm sido fontes valiosas de dicas sobre o mercado de trabalho, *insights* sobre a indústria da programação e motivação para continuar aprendendo. O networking virtual tem sido uma ferramenta poderosa no meu crescimento profissional.\n\nE foi assim que cheguei à conclusão de que, embora tenha iniciado minha jornada focado no front-end, é essencial me tornar um desenvolvedor fullstack com o tempo, mesmo que meu trabalho seja predominantemente no front. Essa visão mais abrangente permite uma compreensão mais profunda do desenvolvimento da web e de aplicativos, facilitando a colaboração em diversos projetos e ampliando minhas oportunidades no mercado.\n\nAté lá, sigo me dedicando aos estudos tanto fazendo os cursos como praticando em projetos pessoais. Aliás, acho que projetos pessoais são essenciais para fixar o que você estuda. Não adianta de nada decorar todos os métodos de array do JavaScript ou todos os hooks do React. Em um semana você vai esquecer todos. É preciso pô-los em prática se desfiando a fazer algo na prática.\n\nEnfim, a programação tem sido uma bela descoberta e um novo vício kkkkkkk que logo logo será minha profissão.</p>"
	},
	{
		"id": "mN6yQw",
		"title": "Aprender programação com IAs",
		"publication": "2024-02-01T03:00:00.000Z",
		"tagList": ["ia", "estudos", "programação"],
		"img": "/assets/blog/aprender-com-ia.jpg",
		"description": "A inteligência artificial pode ser de quem quer aprender a programar, mas tem desvantagens.",
		"content": "Programar é muito legal, mas também muito difícil. Você precisa aprender várias coisas, como sintaxe, lógica, algoritmos, estruturas de dados, etc. E ainda tem que praticar muito, resolver exercícios, fazer projetos, etc. Às vezes, você fica travado, confuso ou desanimado com os problemas que aparecem. E nessas horas, nada mais tentador do que usar IA para \"destravar\".\n\nA inteligência artificial (IA) é uma área da computação que cria máquinas e sistemas que fazem coisas que normalmente precisariam de inteligência humana, como reconhecer rostos, entender textos, jogar xadrez, etc. Uma das formas de fazer isso é usando modelos de linguagem, que são programas que aprendem a gerar e interpretar textos a partir de muitos dados.\n\nCom a IA, você pode ter assistentes virtuais que conversam com você, tiram suas dúvidas, te dão dicas, sugerem recursos, corrigem erros, geram exemplos, etc. Esses assistentes podem te ajudar a aprender a programar, porque eles te dão um feedback na hora, personalizado e adaptado ao seu nível. E ainda deixam o aprendizado mais divertido, dinâmico e motivador.\n\nTem várias opções de assistentes de IA para programação por aí, cada um com seus prós e contras. Neste post, vamos comparar três deles: Windows Copilot, Google Bard e Chat GPT.\n\n## Windows Copilot\n\nO Windows Copilot é um assistente de IA que faz parte do sistema operacional Windows e do navegador Microsoft Edge. Ele usa o GPT, um dos modelos de linguagem mais avançados e conhecidos da atualidade, que foi desenvolvido pela OpenAI, uma organização sem fins lucrativos dedicada à pesquisa em IA. O GPT é capaz de gerar textos coerentes, fluentes e criativos sobre diversos temas, inclusive programação.\n\nO Windows Copilot tem a vantagem de estar disponível no Windows e no Microsoft Edge, o que facilita o acesso e a interação com o usuário. Ele também se conecta à internet, o que permite que ele busque informações atualizadas e relevantes para responder as dúvidas do usuário. Além disso, ele pode se adaptar ao tom e ao estilo do usuário, tornando a conversa mais natural e agradável. Além disso, outra vantagem é que ele sempre disponibiliza os links de onde retirou a informação dada, o que possibilita a checagem.\n## Chat GPT\n\nO Chat GPT é um assistente de IA que usa o mesmo modelo de linguagem do Windows Copilot, o GPT. Mas ele não é integrado a nenhum sistema ou navegador, e sim aplicativo separado, que você pode baixar e instalar no seu smartphone ou acessar pelo site chat.openai.com. \n\nEle tem bons resultados, costumando acertar no tom e no conteúdo dos textos. E ainda, ele pode ser personalizado por você, que pode escolher a língua, o tema, o nível de dificuldade, etc. desde que você saiba construir prompts adequados.\n## Google Bard\n\nO Google Bard é um assistente de IA criado pelo Google, uma das maiores empresas de tecnologia do mundo. Ele usa o LLM Gemini, um modelo de linguagem desenvolvido pelo Google Research, a divisão da empresa dedicada à pesquisa em IA.\n\nO Google Bard tem a vantagem de ser compatível com vários dispositivos e plataformas, como smartphones, tablets, computadores, etc. Ele também pode se integrar com outros serviços e produtos do Google, como o Gmail, o Google Drive, o Google Docs, etc.\n\nNo entanto, o Google Bard também tem algumas desvantagens. Uma delas é que ele costuma ter os piores resultados entre os três assistentes, alucinando com maior frequência. Isso significa que ele pode gerar textos que não fazem sentido, que são contraditórios, que são ofensivos, que são irrelevantes, etc. Isso pode prejudicar o aprendizado e a confiança do usuário.\n\n## Conclusão\n\nA inteligência artificial pode ser uma grande aliada para quem quer aprender a programar, pois pode oferecer um suporte eficiente, interativo e personalizado. No entanto, é importante escolher bem o assistente de IA que se vai usar, pois cada um tem suas vantagens e desvantagens. Neste post, comparamos três opções: Windows Copilot, Google Bard e Chat GPT. Cabe a cada usuário decidir qual se adapta melhor às suas necessidades e preferências.\n\nPorém, a inteligência artificial não é um substitui o esforço do aprendizado. Ela é apenas uma ferramenta que pode te ajudar a superar as dificuldades e a melhorar as suas habilidades. Não adianta nada ficar simplesmente copiando código pronto que a IA gera para você, sem entender o que ele faz ou como ele funciona. É preciso praticar, estudar, testar, debugar, etc. Só assim você vai se tornar um programador de verdade.\n"
	},
	{
		"id": "rF4sJk",
		"title": "Porque usar o Obsidian para estudar programação",
		"publication": "2024-03-04T03:00:00.000Z",
		"tagList": ["estudar"],
		"img": "/assets/blog/obsidian-graph-view.png",
		"description": "O Obsidian é um aplicativo de notas que te permite criar um segundo cérebro para guardar informações de todo tipo que quiser.",
		"content": "Um segundo cérebro é um sistema de organização de conhecimentos que te permite armazenar, recuperar e aplicar as informações que você aprende de forma eficiente e criativa. Com um segundo cérebro, você não precisa confiar apenas na sua memória, mas pode contar com um recurso externo que te ajuda a lembrar, revisar e conectar as ideias que você estuda.\n\nO Obsidian é um aplicativo de anotações conectadas que te permite criar notas em formato markdown e interligá-las entre si. Com ele, você pode criar um segundo cérebro para guardar informações de todo tipo que quiser, inclusive sobre programação. Para isso existem alguns princípios:\n\n- **Capture**: sempre que você aprender algo novo, crie uma nota;\n\n- **Conecte**: crie links entre as suas notas. Basta colocar o nome de uma nota entre colchetes duplos, como [[nome da nota]]. Isso vai criar uma conexão entre as notas, que você pode ver na Visualização de Gráfico (figura anexa). Essas conexões vão te ajudar a criar um mapa mental dos seus conhecimentos, além de facilitar a navegação e a descoberta de novas relações entre as ideias;\n- **Curar**: organize as suas notas em pastas, subpastas, tagList e índices, de acordo com os assuntos ou linguagens que você estuda. Você pode usar o recurso de \"Menções vinculadas\" para ver quais notas possuem links para uma nota específica. Isso vai te ajudar a revisar e reforçar os seus conhecimentos, além de identificar lacunas e oportunidades de aprendizado;\n- **Crie**: use as suas notas para criar conteúdos, dos mais diversos, usando o conhecimento consolidado.\n\n \n\nPessoalmente, gosto de utilizá-lo para referência, afinal de contas é impossível decorar cada sintaxe de cada estrutura de código e assim, pouco a pouco, ir criando minha própria documentação."
	},
	{
		"id": "uV1cXz",
		"title": "Como criar e usar snippets no VSCode",
		"publication": "2025-06-14T03:00:00.000Z",
		"tagList": ["vscode", "programação"],
		"img": "/assets/blog/3ffb9eb7-f93e-4812-a478-049455a8b36b.png",
		"description": "Usar snippets tem sido uma parte crucial no meu uso do vscode pois dá maior agilidade na hora de escrever código.",
		"content": "Usar snippets tem sido uma parte crucial no meu uso do vscode pois dá maior agilidade na hora de escrever código. Para que escrever a estrutura básica de um componente na mão sempre que eu precisar criar um se eu posso simplesmente começar escrever `componente` e apertar Tab e ela aparece ali mágicamente?\n## O que são snippets?\n\nSnippets são modelos de código reutilizáveis que você pode ativar digitando um atalho. Eles funcionam como mini *templates* que o VS Code insere automaticamente no seu arquivo, com variáveis editáveis e posicionamento do cursor inteligente.\n\n## Por que usar snippets?\n\n- **Menos repetição**: você escreve menos código repetitivo manualmente.\n- **Menos erros**: estruturas padronizadas ajudam a manter a consistência.\n- **Mais velocidade**: basta digitar um atalho e pressionar `Tab` para gerar estruturas completas.\n- **Flexibilidade**: você pode criar snippets personalizados para qualquer linguagem ou projeto.\n\n## Criando seu primeiro snippet\n\nVamos ver o passo a passo para criar um snippet no VS Code:\n\n### 1. Acesse a configuração de snippets\n\nAbra a paleta de comandos (`Ctrl+Shift+P`) e digite \"snippets\". A primeira opção que irá aparecer deve ser \"Preferences: Configure User Snippets\". Clique nela.\n\nVocê pode:\n- Escolher um snippet global (New Global Snippets file)\n- Criar para uma linguagem específica (por exemplo, JavaScript ou TypeScript)\n\n### 2. Estrutura básica de um snippet\n\n```json\n{\n\t\"Nome do Snippet\": {\n\t\t\"prefix\": \"atalho\",\n\t\t\"body\": [\n\t\t\t\"linha 1 de código\",\n\t\t\t\"linha 2 de código\",\n\t\t\t\"linha ${1:editável}\"\n\t\t],\n\t\t\"scope\": \"javascript\",\n\t\t\"description\": \"Descrição do snippet\"\n\t}\n}\n```\n\nPreste bastante atenção aqui pois esses campos são importantes:\n\n- `prefix`: o atalho que você irá usar para disparar o *snippet*;\n\n- `body`: o corpo do *snippet*, ou seja, o texto que será inserido.\n\t\t- Se for apenas de uma linha, basta usar uma *string*. Já se for mais de uma linha, aí deve ser um *array* de *strings*;\n\t\t- Use `\t` para simbolizar uma parada de tabulação;\n- `scope`: opcional. Delimita em quais linguagens o *snippet* será usado;\n- `description`: opcional. Esse texto vai aparecer de legenda quando você começar a escrever o atalho.\n\n### 3. Usando o snippet\n\nVamos usar esse *snippet* como exemplo:\n\n```json\n{\n\t\"Função em JS\": {\n\t\t\"prefix\": \"funcao\",\n\t\t\"body\": [\n\t\t\t\"function ${1:nome}(${2:args}) {\",\n\t\t\t\t\"\t${3:// corpo da função}\",\n\t\t\t\"}\"\n\t\t],\n\t\t\"description\": \"Declaração de função padrão em JavaScript\"\n\t}\n}\n```\n\nDepois de salvar, basta digitar `funcao` em um arquivo .js ou .ts, pressionar Tab, e o VS Code vai expandir o trecho automaticamente. Os campos `${1}`, `${2}`, etc., são pontos de parada do cursor, e você pode navegar entre eles com Tab. Aqui foi usado `${1:valor}` para adicionar sugestões editáveis.\n\n## Considerações finais\n\nCriar snippets pode parecer trivial, mas no longo prazo eles economizam muito tempo e esforço. Se você trabalha em projetos com estruturas repetitivas — como componentes React, controllers, classes, testes — investir alguns minutos criando bons snippets vai fazer bastante diferença no longo prazo.\n\nExperimente começar com os blocos que você mais repete e adicione novos conforme for sentindo necessidade.\"\n"
	},
	{
		"id": "Nb5VBl",
		"title": "Renderização condicional de texto no React Native",
		"publication": "2025-07-14",
		"img": "https://res.cloudinary.com/echobind/image/upload/v1661874596/echobind_blog/d4k1i4erncjzjiesmajf.png",
		"description": "Se você já se deparou com a temida tela vermelha (RedBox) no React Native acusando algo como \\\"Text strings must be rendered within a `<Text>` component\\\" mesmo quando tudo parece estar ok, este post é pra você.",
		"tagList": ["mobile", "react-native"],
		"content": "Recentemente, me deparei com um erro bem estranho em um projeto Expo (ou seja, React Native). A mensagem dizia que havia uma string fora de um componente `<Text>`, mas, olhando o código, tudo parecia correto. Todos os textos estavam dentro de `<Text>`, e não havia nada fora do lugar.\n\nDepois de o Github Copilot do VS Code não ajudar em nada e eu arrancar alguns cabelos, acabei chegando no [Stack Overflow](https://stackoverflow.com/questions/52368342/text-strings-must-be-rendered-within-a-text-component) e descobri que o problema estava na forma como eu estava fazendo a renderização condicional de um texto. Eu estava usando um padrão até bastante no mundo React/React Native:\n\n```tsx\n{condition && <Text>Algum texto</Text>}\n```\n\nIsso funciona em muitos casos, mas no Native pode causar problemas com o componente de texto.\n## Por que isso acontece\n\nO problema é que o operador `&&` retorna o segundo valor caso o primeiro seja *\"truthy\"*, e [retorna o próprio valor do primeiro operando se ele for *\"falsy\"*](https://www.koprowski.it/blog/conditional-rendering-react-native-text-crash/) . \n\nNo React Native, isso é perigoso porque valores como `''`, `0`, `false`, `null` ou `undefined` acabam sendo renderizados diretamente no JSX, o que não é permitido fora de um `<Text>`.\n\nPor exemplo:\n\n```tsx\nlet condition = '';\n\n{condition && <Text>Texto</Text>} \n```\n\nSe `condition` for `''` (string vazia), o resultado da expressão será `''`, e o expo (ou o react-native, se estiver usando o cli) irá tentar renderizar como um nó JSX fora de um `<Text>` — o que dispara a RedBox:\n\n![](https://res.cloudinary.com/echobind/image/upload/v1661874596/echobind_blog/d4k1i4erncjzjiesmajf.png)\n\nEsse erro pode ser difícil de rastrear, pois o código \"parece correto\", mas o problema está no valor avaliado.\n\nExiste inclusive uma issue no GitHub do React Native sobre o tema: https://github.com/facebook/react-native/issues/29980\n## A forma mais adequada\n\nA forma mais segura de fazer renderização condicional de texto  é usando o operador ternário:\n\n```tsx\n{condition ? <Text>Algum texto</Text> : null}\n```\n\nDessa forma, você garante que a expressão sempre retorna um JSX válido ou `null`, sem risco de cair em comportamentos inesperados do React Native.\n\nNo React para web, strings e números podem ser renderizados diretamente como filhos de elementos como `<div>` ou `<span>`. Já no React Native, qualquer texto literal precisa estar dentro de um `<Text>`, o que torna a plataforma mais sensível a esse tipo de erro.\n## Conclusão\n\nSe você estiver renderizando texto condicionalmente no React Native, **sempre prefira o operador ternário**. Evita erros difíceis de entender e te poupa tempo de debug. O padrão `condition && <Text>` funciona no React para web, mas no React Native ele pode quebrar seu app silenciosamente ou com mensagens confusas."
	}
]
